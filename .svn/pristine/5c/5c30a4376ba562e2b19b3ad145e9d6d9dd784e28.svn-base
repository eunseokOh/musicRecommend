package net.musicrecommend.www.user;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import net.musicrecommend.www.util.PageNation;

@Controller
@RequestMapping("user")
public class UserController {
	
	private static final Logger logger = LoggerFactory.getLogger(UserController.class); 
	
	
	
	@Value("${upload_path}")
	private String uploadUrl;
	
	@Inject
	UserService userService;
	
	
	
	private void createUploadDir() {
		File dir = new File(uploadUrl);
		if (!dir.exists()) {// 존재 하지 않으면
			dir.mkdirs(); // 폴더를 만들어 준다.
			
		}
	}
	
	private String getUniqueFileName(String fileName){
		String uniqueFileName = null;
		String uuid = UUID.randomUUID().toString().replace("-", "").toLowerCase();
		
		int fileIndex = fileName.lastIndexOf(".");
		
		if(fileIndex != -1){
			String extension = fileName.substring(fileIndex+1);
			uniqueFileName = uuid + "." + extension;
		} else {
			logger.info("getUniqueFileName() Error!");
		}
		
		
		return uniqueFileName;
		
	}
	
	@RequestMapping(value="join", method= RequestMethod.GET)
	public void userJoin(){
		
	}
	
	@RequestMapping(value="join", method= RequestMethod.POST)
	public void userJoinAction(@ModelAttribute UserVO userVO) throws IllegalStateException, IOException{
		CommonsMultipartFile cmf =  userVO.getUser_img_file();
		
		
		
		String originalFilename = cmf.getOriginalFilename();
		String contentType = cmf.getContentType();
		
		boolean isImage = contentType.substring(0, 6).equals("image/");
		
		
		String ext = "."+contentType.substring(6, contentType.length());
		
		File file = new File(uploadUrl, getUniqueFileName(originalFilename));// 원하는 경로로 이동하기 위해
		
		userVO.setUser_img(getUniqueFileName(originalFilename));
		try {
			cmf.transferTo(file);
		} catch (FileNotFoundException e1) {
			// 폴더가 없을경우 파일낫파운드 익셉션
			createUploadDir(); // 없을경우 폴더를 만들어준다.
			cmf.transferTo(file);
		} catch (IOException e) {
			e.printStackTrace();
			// 대부분의 에러는 권한 ,하드 용량, 파일이 없거나
		}
			
		try {
			userService.insertUser(userVO);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@RequestMapping("list")
	public String userList(Model model, @PathVariable int pg){
		int total_article_count = -1;
		List<UserVO> userList = null;
		try {
			total_article_count = userService.getUserTotalCount();
			PageNation pageNation = new PageNation(pg, total_article_count);
			
			userList = userService.selectUserList(pageNation);
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		model.addAttribute("userList", userList);
		
		return "user/list";
	}
	
	
	
	
	
}
